{"version":3,"sources":["Welcome.js","panels/Diet.js","panels/Steps.js","panels/Water.js","App.js","index.js"],"names":["Welcome","className","this","props","user","React","Component","Diet","state","pChartData","labels","datasets","label","data","protein","current","target","fill","backgroundColor","borderColor","cChartData","carbs","fChartData","fat","options","maintainAspectRatio","color","redraw","Math","floor","width","Steps","chartData","steps","stepsGoal","setState","prev","goal","id","Water","currentWater","percent","App","isLoggedIn","credentials","username","password","userData","macros","dist","distance","water","loginCheck","bind","updateGoals","show","document","querySelector","classList","toggle","e","preventDefault","value","currentUser","style","display","opacity","p","c","f","console","log","parseInt","onClick","onSubmit","htmlFor","type","name","placeholder","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8b6fa2ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Welcome extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n                <h1>Welcome, {this.props.user}!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nclass Diet extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pChartData: {\r\n                labels: ['Current Grams Protein'],\r\n                datasets: [{\r\n                    label: 'Protein',\r\n                    data: [this.props.data.protein.current, this.props.data.protein.target - this.props.data.protein.current],\r\n                    fill: true,\r\n                    backgroundColor: ['#f77f00', 'transparent'],\r\n                    borderColor: 'transparent'\r\n                }]\r\n            },\r\n            cChartData: {\r\n                labels: ['Current Grams Carbohydrates'],\r\n                datasets: [{\r\n                    label: 'Carbohydrates',\r\n                    data: [this.props.data.carbs.current, this.props.data.carbs.target - this.props.data.carbs.current],\r\n                    fill: true,\r\n                    backgroundColor: ['#1a759f', 'transparent'],\r\n                    borderColor: 'transparent'\r\n                }]\r\n            },\r\n            fChartData: {\r\n                labels: ['Current Grams Fat'],\r\n                datasets: [{\r\n                    label: 'Fat',\r\n                    data: [this.props.data.fat.current, this.props.data.fat.target - this.props.data.fat.current],\r\n                    fill: true,\r\n                    backgroundColor: ['#6930c3', 'transparent'],\r\n                    borderColor: 'transparent'\r\n                }]\r\n\r\n            },\r\n            options: {\r\n                maintainAspectRatio: false,\r\n                color: 'black',\r\n                redraw: true\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='diet container'>\r\n                <h2>Macros</h2>\r\n                <div className='macroContainer'>\r\n                    <div className='chart third'>\r\n                        <Doughnut data={this.state.pChartData} options={this.state.options} />\r\n                    </div>\r\n                    <h2>Current: {this.props.data.protein.current}g ({Math.floor((this.props.data.protein.current / this.props.data.protein.target) * 100)}%)</h2>\r\n                    <div className='chart third'>\r\n                        <Doughnut data={this.state.cChartData} options={this.state.options} />\r\n                    </div>\r\n                    <h2>Current: {this.props.data.carbs.current}g ({Math.floor((this.props.data.carbs.current / this.props.data.carbs.target) * 100)}%)</h2>\r\n                    <div className='chart third'>\r\n                        <Doughnut data={this.state.fChartData} options={this.state.options} width={1000} />\r\n                    </div>\r\n                    <h2>Current: {this.props.data.fat.current}g ({Math.floor((this.props.data.fat.current / this.props.data.fat.target) * 100)}%)</h2>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Diet;","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nclass Steps extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            chartData: {\r\n                labels: ['Current'],\r\n                datasets: [{\r\n                    label: 'Steps',\r\n                    data: [this.props.data.steps, this.props.data.stepsGoal - this.props.data.steps],\r\n                    fill: true,\r\n\r\n                    backgroundColor: ['#ff9f1c', 'transparent'],\r\n                    borderColor: 'transparent'\r\n                }]\r\n\r\n            },\r\n            options: {\r\n                color: 'white',\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState((prev) => {\r\n            return {\r\n                ...prev,\r\n                steps: this.props.data.steps,\r\n                goal: this.props.data.stepsGoal\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className='steps container'>\r\n                <h2>Steps / Distance</h2>\r\n                <div className='chart'>\r\n                    <Doughnut data={this.state.chartData} options={this.state.options} />\r\n                    <div className='content'>\r\n                        <h3>Current Steps : {this.props.data.steps}</h3>\r\n                        <h3 id='goal'>Goal : {this.props.data.stepsGoal}</h3>\r\n                        <h3>Overall Completion : {Math.floor((this.props.data.steps / this.props.data.stepsGoal) * 100)}%</h3>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Steps;","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2'\r\n\r\nclass Water extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: {\r\n                labels: ['Current Liters'],\r\n                datasets: [{\r\n                    label: 'Water Goal',\r\n                    data: [this.props.data.current, this.props.data.goal - this.props.data.current],\r\n                    backgroundColor: ['#0077b6', 'transparent'],\r\n                    borderColor: 'transparent'\r\n                }]\r\n\r\n            },\r\n            options: {\r\n                color: 'white'\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState((prev) => {\r\n            return {\r\n                ...prev,\r\n                currentWater: this.props.data.current,\r\n                target: this.props.data.goal,\r\n                percent: Math.floor((this.props.data.current / this.props.data.goal) * 100)\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className='water container'>\r\n                <h2>Water</h2>\r\n                <div className='chart'>\r\n                    <Doughnut data={this.state.data} options={this.state.options} />\r\n                    <div className='content'>\r\n                        <h3>Liters Drank : {this.state.currentWater}</h3>\r\n                        <h3>Target Liters : {this.props.data.goal}</h3>\r\n                        <h3>Overall Completion : {this.state.percent}%</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Water;","import React from 'react';\nimport './App.css';\nimport Welcome from './Welcome';\nimport Diet from './panels/Diet';\nimport Steps from './panels/Steps'\nimport Water from './panels/Water'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      isLoggedIn: false,\n      credentials: {\n        username: '',\n        password: ''\n      },\n      userData: {\n        macros: {\n          protein: {\n            current: 24.5,\n            target: 50,\n          },\n          carbs: {\n            current: 40,\n            target: 75\n          },\n          fat: {\n            current: 10,\n            target: 14\n          }\n        },\n        dist: {\n          steps: 2000,\n          stepsGoal: 7000,\n          distance: '2.3km'\n        },\n        water: {\n          current: 1,\n          goal: 3\n        }\n      }\n    }\n    this.loginCheck = this.loginCheck.bind(this);\n    this.updateGoals = this.updateGoals.bind(this);\n    this.show = this.show.bind(this);\n  }\n\n\n  show() {\n    const target = document.querySelector('.blur');\n    target.classList.toggle('show')\n  }\n\n  loginCheck(e) {\n    e.preventDefault();\n    const username = (e.target[0].value === this.state.credentials.username) ? true : false;\n    const password = (e.target[1].value === this.state.credentials.password) ? true : false;\n    if (username && password) {\n      this.setState(prev => {\n        return ({\n          ...prev,\n          isLoggedIn: true,\n          currentUser: 'Jake'\n        })\n\n      })\n      e.target[0].value = '';\n      e.target[1].value = '';\n      const body = document.querySelector('body');\n      body.style.display = 'block';\n    } else {\n      const err = document.querySelector('.errorLabel');\n      err.style.opacity = 100;\n    }\n  }\n\n  updateGoals(e) {\n    e.preventDefault();\n    const p = document.querySelector('#proteinIn')\n    const c = document.querySelector('#carbsIn')\n    const f = document.querySelector('#fatIn')\n    console.log(p.value, c.value, f.value);\n    this.setState(prev => {\n      return {\n        ...prev,\n        userData: {\n          macros: {\n            protein: {\n              current: 24.5,\n              target: parseInt(p.value),\n            },\n            carbs: {\n              current: 40,\n              target: parseInt(c.value)\n            },\n            fat: {\n              current: 10,\n              target: parseInt(f.value)\n            }\n          },\n          dist: {\n            steps: 2000,\n            stepsGoal: 7000,\n            distance: '2.3km'\n          },\n          water: {\n            current: 1,\n            goal: 3\n          }\n        }\n      }\n    })\n    document.querySelector('.blur').classList.toggle('show');\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    if (!this.state.isLoggedIn) {\n      return (\n        <div className=\"loginForm\" >\n          <h1>Login to Personal Goals!</h1>\n          <h2 className='errorLabel'>Incorrect Credentials!</h2>\n          <form onSubmit={this.loginCheck} >\n            <label htmlFor=\"username\" >Username: </label>\n            <input id=\"username\" placeholder=\"username\"></input>\n            <label htmlFor=\"password\">Password: </label>\n            <input id=\"password\" placeholder=\"password\" type='password'></input>\n            <button>Login!</button>\n          </form>\n        </div >\n      )\n\n    } else {\n      return (\n        <>\n          <Welcome user={currentUser} />\n          <button id='updateGoals' onClick={this.show}>Change Goals</button>\n          <div className='blur'>\n            <div id='changeForm'>\n\n              <form onSubmit={this.updateGoals}>\n                <span>\n                  <label htmlFor='proteinIn'>Change Protein To(g): </label>\n                  <input type='number' name='proteinIn' id='proteinIn'></input>\n                </span>\n                <span>\n                  <label htmlFor='carbsIn'>Change Carbs To(g):</label>\n                  <input type='number' name='carbsIn' id='carbsIn'></input>\n                </span>\n                <span>\n                  <label htmlFor='fatIn'>Change Fat To(g):</label>\n                  <input type='number' name='fatIn' id='fatIn'></input>\n                </span>\n\n\n                <button>Update</button>\n              </form>\n\n\n            </div>\n          </div>\n\n\n          <div className='trackerContainer'>\n            <Diet data={this.state.userData.macros} />\n            <Steps data={this.state.userData.dist} />\n            <Water data={this.state.userData.water} />\n          </div>\n\n        </>\n\n\n      )\n    }\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}